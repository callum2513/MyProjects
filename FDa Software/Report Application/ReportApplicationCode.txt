
#include "pch.h"
#include <iostream>
#include <windows.h>
#include <conio.h>
#include <string>
#include <iomanip>
#include <fstream>
#include <algorithm>
#include <cctype>

using namespace std;

// Candidate Details Struct Prototype Declaration //
struct candidateDetails
{
	int candidateNo;
	string forename;
	string surname;
	int mark1, mark2, mark3, mark4, mark5;
	int average;
};

// Display Functions Prototype Declarations //
void showMenu(struct candidateDetails stu[], int size);
void showCandidate(struct candidateDetails stu[], int size);
void openmenu();
void consoleSize();
void splashScreen();

// Other Functions Prototype Declarations //
int returnAverage(struct candidateDetails stu[], int size);
void setCursor(int x, int y);
void gotoXY(short x, short y);
void keyposition(int x, int y);
void clearLine(int x, int y);
void pressKey(int x, int y);

// Validation Functions Prototype Declaration //
int validateNum(int max, int min, int x, int y);

// Struct Function Prototype Declaration //
int students(struct candidateDetails stu[]);

//Sort Functions
bool sortForename(candidateDetails AtoZ, candidateDetails AtoZVerify)
{
	return AtoZ.forename < AtoZVerify.forename;

}
bool sortSurname(candidateDetails AtoZ, candidateDetails AtoZVerify)
{
	return AtoZ.surname < AtoZVerify.surname;

}
bool sortAverage(candidateDetails AtoZ, candidateDetails AtoZVerify)
{
	return AtoZ.average < AtoZVerify.average;

}
void forenameSorter(candidateDetails stu[], int size);
void surnameSorter(candidateDetails stu[], int size);
void averageSorter(candidateDetails stu[], int size);

// Add, Update and Search Functions Prototype Declarations //
void addCandidate(struct candidateDetails stu[], int size);
void updateMenu(struct candidateDetails stu[], int size);
void searchForename(struct candidateDetails stu[], int size);
void searchByLastName(struct candidateDetails stu[], int size);

// Report Functions  Prototype Declarations //
void reportExport(candidateDetails stu[], int size);
void reportCandidateReferred(struct candidateDetails stu[], int size);
void reportCandidatePass(struct candidateDetails stu[], int size);
void reportCandidateMerit(struct candidateDetails stu[], int size);
void reportCandidateDistinction(struct candidateDetails stu[], int size);
void reportGradePercentage(struct candidateDetails stu[], int size);
void reportOverall(struct candidateDetails stu[], int size);

// Handle to console window's context. Prototype Declarations //
HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);

// Main Method  Holds Switch with menu options// 
int main()
{
	consoleSize();
	system("color 06");
	splashScreen();
	_getch();
	int choice, size;
	candidateDetails candidate[50];
	size = students(candidate);
	for (int i = 0; i < size; i++)

		do {
			openmenu();
			choice = validateNum(5, 1, 47, 20);
			// Switch with menu options allows the user to navigate through the programme //
			switch (choice)
			{
			case 1:
				addCandidate(candidate, size);
				size++;
				break;
			case 2:
				showMenu(candidate, size);
				break;
			case 3:
				updateMenu(candidate, size);
				break;
			case 4:
				reportExport(candidate, size);
				break;
			case 5:
				return 0;
			}
		} while (choice != 5);
		cout << "\n\n\t Press any Key to return to Exit";
		_getch();
		return 0;
}

// Struct holding Candidate details //
int students(struct candidateDetails stu[])
{
	stu[0].candidateNo = 1; stu[0].forename = "Joseph"; stu[0].surname = "Daniels";
	stu[0].mark1 = 34; stu[0].mark2 = 56; stu[0].mark3 = 79; stu[0].mark4 = 55; stu[0].mark5 = 23;
	stu[0].average = ((stu[0].mark1 + stu[0].mark2 + stu[0].mark3 + stu[0].mark4 + stu[0].mark5) / 5);

	stu[1].candidateNo = 2; stu[1].forename = "Ethan"; stu[1].surname = "McLaughlin";
	stu[1].mark1 = 9; stu[1].mark2 = 76; stu[1].mark3 = 65; stu[1].mark4 = 43; stu[1].mark5 = 70;
	stu[1].average = ((stu[1].mark1 + stu[1].mark2 + stu[1].mark3 + stu[1].mark4 + stu[1].mark5) / 5);

	stu[2].candidateNo = 3; stu[2].forename = "Teresa"; stu[2].surname = "Donnelly";
	stu[2].mark1 = 23; stu[2].mark2 = 10; stu[2].mark3 = 50; stu[2].mark4 = 31; stu[2].mark5 = 6;
	stu[2].average = ((stu[2].mark1 + stu[2].mark2 + stu[2].mark3 + stu[2].mark4 + stu[2].mark5) / 5);

	stu[3].candidateNo = 4; stu[3].forename = "Jack"; stu[3].surname = "Doherty";
	stu[3].mark1 = 24; stu[3].mark2 = 12; stu[3].mark3 = 25; stu[3].mark4 = 33; stu[3].mark5 = 12;
	stu[3].average = ((stu[3].mark1 + stu[3].mark2 + stu[3].mark3 + stu[3].mark4 + stu[3].mark5) / 5);

	stu[4].candidateNo = 5; stu[4].forename = "Jason"; stu[4].surname = "Michaels";
	stu[4].mark1 = 63; stu[4].mark2 = 89; stu[4].mark3 = 59; stu[4].mark4 = 35; stu[4].mark5 = 16;
	stu[4].average = ((stu[4].mark1 + stu[4].mark2 + stu[4].mark3 + stu[4].mark4 + stu[4].mark5) / 5);

	stu[5].candidateNo = 6; stu[5].forename = "Gary"; stu[5].surname = "Borin";
	stu[5].mark1 = 36; stu[5].mark2 = 70; stu[5].mark3 = 22; stu[5].mark4 = 35; stu[5].mark5 = 23;
	stu[5].average = ((stu[5].mark1 + stu[5].mark2 + stu[5].mark3 + stu[5].mark4 + stu[5].mark5) / 5);

	stu[6].candidateNo = 7; stu[6].forename = "Danny"; stu[6].surname = "Friel";
	stu[6].mark1 = 32; stu[6].mark2 = 100; stu[6].mark3 = 80; stu[6].mark4 = 50; stu[6].mark5 = 60;
	stu[6].average = ((stu[6].mark1 + stu[6].mark2 + stu[6].mark3 + stu[6].mark4 + stu[6].mark5) / 5);

	stu[7].candidateNo = 8; stu[7].forename = "Yusaf"; stu[7].surname = "Donnelly";
	stu[7].mark1 = 23; stu[7].mark2 = 34; stu[7].mark3 = 56; stu[7].mark4 = 70; stu[7].mark5 = 70;
	stu[7].average = ((stu[7].mark1 + stu[7].mark2 + stu[7].mark3 + stu[7].mark4 + stu[7].mark5) / 5);

	stu[8].candidateNo = 9; stu[8].forename = "Tessa"; stu[8].surname = "Dunlevy";
	stu[8].mark1 = 50; stu[8].mark2 = 35; stu[8].mark3 = 25; stu[8].mark4 = 11; stu[8].mark5 = 99;
	stu[8].average = ((stu[8].mark1 + stu[8].mark2 + stu[8].mark3 + stu[8].mark4 + stu[8].mark5) / 5);

	stu[9].candidateNo = 10; stu[9].forename = "Jess"; stu[9].surname = "Taylor";
	stu[9].mark1 = 69; stu[9].mark2 = 80; stu[9].mark3 = 53; stu[9].mark4 = 78; stu[9].mark5 = 70;
	stu[9].average = ((stu[9].mark1 + stu[9].mark2 + stu[9].mark3 + stu[9].mark4 + stu[9].mark5) / 5);

	stu[10].candidateNo = 11; stu[10].forename = "Dean"; stu[10].surname = "Winchester";
	stu[10].mark1 = 50; stu[10].mark2 = 60; stu[10].mark3 = 82; stu[10].mark4 = 70; stu[10].mark5 = 91;
	stu[10].average = ((stu[10].mark1 + stu[10].mark2 + stu[10].mark3 + stu[10].mark4 + stu[10].mark5) / 5);

	stu[11].candidateNo = 12; stu[11].forename = "Josh"; stu[11].surname = "Hamiltion";
	stu[11].mark1 = 71; stu[11].mark2 = 66; stu[11].mark3 = 60; stu[11].mark4 = 52; stu[11].mark5 = 52;
	stu[11].average = ((stu[11].mark1 + stu[11].mark2 + stu[11].mark3 + stu[11].mark4 + stu[11].mark5) / 5);

	stu[12].candidateNo = 13; stu[12].forename = "Tyson"; stu[12].surname = "Kelly";
	stu[12].mark1 = 90; stu[12].mark2 = 85; stu[12].mark3 = 65; stu[12].mark4 = 84; stu[12].mark5 = 96;
	stu[12].average = ((stu[12].mark1 + stu[12].mark2 + stu[12].mark3 + stu[12].mark4 + stu[12].mark5) / 5);

	stu[13].candidateNo = 14; stu[13].forename = "Johnny"; stu[13].surname = "Allen";
	stu[13].mark1 = 35; stu[13].mark2 = 62; stu[13].mark3 = 35; stu[13].mark4 = 52; stu[13].mark5 = 80;
	stu[13].average = ((stu[13].mark1 + stu[13].mark2 + stu[13].mark3 + stu[13].mark4 + stu[13].mark5) / 5);

	stu[14].candidateNo = 15; stu[14].forename = "Sam "; stu[14].surname = "Winchester";
	stu[14].mark1 = 87; stu[14].mark2 = 50; stu[14].mark3 = 74; stu[14].mark4 = 71; stu[14].mark5 = 89;
	stu[14].average = ((stu[14].mark1 + stu[14].mark2 + stu[14].mark3 + stu[14].mark4 + stu[14].mark5) / 5);

	stu[15].candidateNo = 16; stu[15].forename = "Joeseph"; stu[15].surname = "Paddington";
	stu[15].mark1 = 10; stu[15].mark2 = 33; stu[15].mark3 = 5; stu[15].mark4 = 20; stu[15].mark5 = 50;
	stu[15].average = ((stu[15].mark1 + stu[15].mark2 + stu[15].mark3 + stu[15].mark4 + stu[15].mark5) / 5);

	stu[16].candidateNo = 17; stu[16].forename = "Alex"; stu[16].surname = "Donnelly";
	stu[16].mark1 = 40; stu[16].mark2 = 70; stu[16].mark3 = 55; stu[16].mark4 = 74; stu[16].mark5 = 80;
	stu[16].average = ((stu[16].mark1 + stu[16].mark2 + stu[16].mark3 + stu[16].mark4 + stu[16].mark5) / 5);

	stu[17].candidateNo = 18; stu[17].forename = "Lee"; stu[17].surname = "Ross";
	stu[17].mark1 = 65; stu[17].mark2 = 26; stu[17].mark3 = 85; stu[17].mark4 = 70; stu[17].mark5 = 36;
	stu[17].average = ((stu[17].mark1 + stu[17].mark2 + stu[17].mark3 + stu[17].mark4 + stu[17].mark5) / 5);

	stu[18].candidateNo = 19; stu[18].forename = "Emily"; stu[18].surname = "Danielson";
	stu[18].mark1 = 33; stu[18].mark2 = 60; stu[18].mark3 = 33; stu[18].mark4 = 71; stu[18].mark5 = 75;
	stu[18].average = ((stu[18].mark1 + stu[18].mark2 + stu[18].mark3 + stu[18].mark4 + stu[18].mark5) / 5);

	stu[19].candidateNo = 20; stu[19].forename = "Jean"; stu[19].surname = "Miller";
	stu[19].mark1 = 33; stu[19].mark2 = 70; stu[19].mark3 = 80; stu[19].mark4 = 22; stu[19].mark5 = 52;
	stu[19].average = ((stu[19].mark1 + stu[19].mark2 + stu[19].mark3 + stu[19].mark4 + stu[19].mark5) / 5);

	stu[20].candidateNo = 21; stu[20].forename = "Johan"; stu[20].surname = "Clause";
	stu[20].mark1 = 66; stu[20].mark2 = 19; stu[20].mark3 = 70; stu[20].mark4 = 66; stu[20].mark5 = 91;
	stu[20].average = ((stu[20].mark1 + stu[20].mark2 + stu[20].mark3 + stu[20].mark4 + stu[20].mark5) / 5);

	stu[21].candidateNo = 22; stu[21].forename = "Peter"; stu[21].surname = "Wilson";
	stu[21].mark1 = 66; stu[21].mark2 = 53; stu[21].mark3 = 82; stu[21].mark4 = 63; stu[21].mark5 = 59;
	stu[21].average = ((stu[21].mark1 + stu[21].mark2 + stu[21].mark3 + stu[21].mark4 + stu[21].mark5) / 5);

	stu[22].candidateNo = 23; stu[22].forename = "Donny"; stu[22].surname = "Payne";
	stu[22].mark1 = 84; stu[22].mark2 = 100; stu[22].mark3 = 88; stu[22].mark4 = 60; stu[22].mark5 = 49;
	stu[22].average = ((stu[22].mark1 + stu[22].mark2 + stu[22].mark3 + stu[22].mark4 + stu[22].mark5) / 5);

	stu[23].candidateNo = 24; stu[23].forename = "Laya"; stu[23].surname = "Donnelly";
	stu[23].mark1 = 100; stu[23].mark2 = 70; stu[23].mark3 = 63; stu[23].mark4 = 48; stu[23].mark5 = 58;
	stu[23].average = ((stu[23].mark1 + stu[23].mark2 + stu[23].mark3 + stu[23].mark4 + stu[23].mark5) / 5);

	stu[24].candidateNo = 25; stu[24].forename = "Jurgen"; stu[24].surname = "Klitschko";
	stu[24].mark1 = 72; stu[24].mark2 = 33; stu[24].mark3 = 52; stu[24].mark4 = 48; stu[24].mark5 = 69;
	stu[24].average = ((stu[24].mark1 + stu[24].mark2 + stu[24].mark3 + stu[24].mark4 + stu[24].mark5) / 5);

	stu[25].candidateNo = 26; stu[25].forename = "Yohan"; stu[25].surname = "Krouf";
	stu[25].mark1 = 72; stu[25].mark2 = 76; stu[25].mark3 = 90; stu[25].mark4 = 56; stu[25].mark5 = 72;
	stu[25].average = ((stu[25].mark1 + stu[25].mark2 + stu[25].mark3 + stu[25].mark4 + stu[25].mark5) / 5);

	stu[26].candidateNo = 27; stu[26].forename = "Dennis"; stu[26].surname = "Reinhardt";
	stu[26].mark1 = 75; stu[26].mark2 = 60; stu[26].mark3 = 81; stu[26].mark4 = 82; stu[26].mark5 = 75;
	stu[26].average = ((stu[0].mark1 + stu[0].mark2 + stu[0].mark3 + stu[0].mark4 + stu[0].mark5) / 5);

	stu[27].candidateNo = 28; stu[27].forename = "Patrick"; stu[27].surname = "Moore";
	stu[27].mark1 = 81; stu[27].mark2 = 75; stu[27].mark3 = 62; stu[27].mark4 = 69; stu[27].mark5 = 82;
	stu[27].average = ((stu[27].mark1 + stu[27].mark2 + stu[27].mark3 + stu[27].mark4 + stu[27].mark5) / 5);

	stu[28].candidateNo = 29; stu[28].forename = "Kerry"; stu[28].surname = "Donnelly";
	stu[28].mark1 = 88; stu[28].mark2 = 77; stu[28].mark3 = 66; stu[28].mark4 = 55; stu[28].mark5 = 99;
	stu[28].average = ((stu[28].mark1 + stu[28].mark2 + stu[28].mark3 + stu[28].mark4 + stu[28].mark5) / 5);

	stu[29].candidateNo = 30; stu[29].forename = "Marcus"; stu[29].surname = "Keller";
	stu[29].mark1 = 99; stu[29].mark2 = 89; stu[29].mark2 = 87; stu[29].mark4 = 97; stu[29].mark5 = 91;
	stu[29].average = ((stu[29].mark1 + stu[29].mark3 + stu[29].mark3 + stu[29].mark4 + stu[29].mark5) / 5);

	return 30;
}

//Other Functions //
void gotoXY(short x, short y)
{
	COORD c = { x, y };
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), c);
}
void keyposition(int x, int y)
{
	gotoXY(x, y);
	cout << " ";
}
void setCursor(int x, int y)
{
	pressKey(x - 25, y + 5);
	clearLine(x - 25, y + 3);
	clearLine(x - 25, y + 5);
	gotoXY(x - 25, y + 5);
	gotoXY(x, y);
	clearLine(x, y);
	gotoXY(x - 1, y);
	SetConsoleTextAttribute(hConsole, 0x06);
	cout << "[ ]";
	gotoXY(x, y);
}
void clearLine(int x, int y)
{
	//Used to clear prompts and user input
	gotoXY(x, y);

	for (int i = x; i <= 80; i++)
	{
		cout << " ";
	}
}
void pressKey(int x, int y)
{
	gotoXY(x, y);
	cout << "Press any key to continue...";
	_getch();
}

// Main Menu Display Function //
void openmenu()
{
	system("cls");
	gotoXY(22, 5);  cout << "Candidate Database (Music)";
	gotoXY(22, 8);  cout << "1. Add Candidate";
	gotoXY(22, 10); cout << "2. Display Candidate List";
	gotoXY(22, 12); cout << "3. Update Candidate";
	gotoXY(22, 14); cout << "4. Generate Report";
	gotoXY(22, 16); cout << "5. Exit.";
	gotoXY(22, 20); cout << "Enter an Option (1 - 5) [ ]";

}

// Add Candidate Function //
void addCandidate(struct candidateDetails stu[], int size)
{
	system("cls");
	cout << "\n\n\tAdd Candidate";
	int remainder;
	char option;
	remainder = 50 - size;
	int i = 0;

	do {

		gotoXY(6, 6); cout << "\n\t Enter Candidate Forename: ";
		cin >> stu[size].forename;
		stu[size].forename[0] = toupper(stu[size].forename[0]);
		gotoXY(6, 8); cout << "\n\t Enter Candidate Surname: ";
		cin >> stu[size].surname;
		stu[size].surname[0] = toupper(stu[size].surname[0]);
		gotoXY(6, 12); cout << "\n\t Enter Sight Reading Mark: ";
		stu[size].mark1 = validateNum(100, 1, 34, 13);
		gotoXY(6, 14); cout << "\n\t Enter Practical 1 Mark: ";
		stu[size].mark2 = validateNum(100, 1, 34, 15);
		gotoXY(6, 16); cout << "\n\t Enter Practical 2 Mark: ";
		stu[size].mark3 = validateNum(100, 1, 34, 17);
		gotoXY(6, 18); cout << "\n\t Enter Theory Mark:  ";
		stu[size].mark4 = validateNum(100, 1, 34, 19);
		gotoXY(6, 20); cout << "\n\t Enter Aural Mark:  ";
		stu[size].mark5 = validateNum(100, 1, 34, 21);
		stu[size].candidateNo = (size + 1);
		stu[size].average = ((stu[i].mark1 + stu[i].mark2 + stu[i].mark3 + stu[i].mark4 + stu[i].mark5) / 5);
		gotoXY(6, 25); cout << "Would you like too add another candidate (Y/N):";
		cin >> option;
		i++;
		system("cls");
		size++;

	} while (option == 'Y' || option == 'y');
	cin.ignore();
	cin.clear();
}

// Display Menu Functions //
void splashScreen()
{

	gotoXY(9, 3); cout << "  ______                             __  __        __              __               " << endl;
	gotoXY(9, 4); cout << " /      \                           /  |/  |      /  |            /  |              " << endl;
	gotoXY(9, 5); cout << "/$$$$$$  |  ______   _______    ____$$ |$$/   ____$$ |  ______   _$$ |_     ______  " << endl;
	gotoXY(9, 6); cout << "$$ |  $$/  /      \ /       \  /    $$ |/  | /    $$ | /      \ / $$   |   /      \ " << endl;
	gotoXY(9, 7); cout << "$$ |       $$$$$$  |$$$$$$$  |/$$$$$$$ |$$ |/$$$$$$$ | $$$$$$  |$$$$$$/   /$$$$$$  |" << endl;
	gotoXY(9, 8); cout << "$$ |   __  /    $$ |$$ |  $$ |$$ |  $$ |$$ |$$ |  $$ | /    $$ |  $$ | __ $$    $$ |" << endl;
	gotoXY(9, 9); cout << "$$ \__/  |/$$$$$$$ |$$ |  $$ |$$ \__$$ |$$ |$$ \__$$ |/$$$$$$$ |  $$ |/  |$$$$$$$$/ " << endl;
	gotoXY(9, 10); cout << "$$    $$/ $$    $$ |$$ |  $$ |$$    $$ |$$ |$$    $$ |$$    $$ |  $$  $$/ $$       |" << endl;
	gotoXY(9, 11); cout << " $$$$$$/   $$$$$$$/ $$/   $$/  $$$$$$$/ $$/  $$$$$$$/  $$$$$$$/    $$$$/   $$$$$$$/ " << endl;
	gotoXY(9, 12); cout << " _______               __                __                                     " << endl;
	gotoXY(9, 13); cout << "/       \             /  |              /  |                                    " << endl;
	gotoXY(9, 14); cout << "$$$$$$$  |  ______   _$$ |_     ______  $$ |____    ______    _______   ______  " << endl;
	gotoXY(9, 15); cout << "$$ |  $$ | /      \ / $$   |   /      \ $$      \  /      \  /       | /      \ " << endl;
	gotoXY(9, 16); cout << "$$ |  $$ | $$$$$$  |$$$$$$/    $$$$$$  |$$$$$$$  | $$$$$$  |/$$$$$$$/ /$$$$$$  |" << endl;
	gotoXY(9, 17); cout << "$$ |  $$ | /    $$ |  $$ | __  /    $$ |$$ |  $$ | /    $$ |$$      \ $$    $$ |" << endl;
	gotoXY(9, 18); cout << "$$ |__$$ |/$$$$$$$ |  $$ |/  |/$$$$$$$ |$$ |__$$ |/$$$$$$$ | $$$$$$  |$$$$$$$$/ " << endl;
	gotoXY(9, 19); cout << "$$    $$/ $$    $$ |  $$  $$/ $$    $$ |$$    $$/ $$    $$ |/     $$/ $$       |" << endl;
	gotoXY(9, 20); cout << "$$$$$$$/   $$$$$$$/    $$$$/   $$$$$$$/ $$$$$$$/   $$$$$$$/ $$$$$$$/   $$$$$$$/ " << endl;

	gotoXY(9, 24); cout << "PRESS ANY KEY TO CONTINUE....." << endl;


}
void showMenu(struct candidateDetails stu[], int size)
{
	int choice;
	for (int i = 0; i < 100; i++)
	{
		system("cls");
		gotoXY(6, 6); cout << "Candidate Database";
		gotoXY(6, 8); cout << "Sort Options";
		gotoXY(6, 9); cout << "How would you like to display the candidates?";
		gotoXY(6, 12); cout << "1. By Forename (A-Z)";
		gotoXY(6, 13); cout << "2. By Surname (A-Z)";
		gotoXY(6, 14); cout << "3. By Average (Lowest - Highest";
		gotoXY(6, 15); cout << "4. Exit";
		gotoXY(6, 17); cout << "Please enter an Option: ";
		choice = validateNum(4, 1, 29, 17);

		// Switch for user to choose how they want to sort the display of the candidate list //
		switch (choice)
		{
		case 1:

			forenameSorter(stu, size);
			_getch();
			break;
		case 2:
			surnameSorter(stu, size);
			_getch();
			break;
		case 3:
			averageSorter(stu, size);
			_getch();
		case 4:
			break;
		}
		if (choice = 4)
		{
			break;
		}
	}
}
void consoleSize()
{
	HWND console = GetConsoleWindow();
	RECT r;
	GetWindowRect(console, &r); //stores the console's current dimensions

	MoveWindow(console, r.left, r.top, 1100, 600, TRUE); // 1100 width, 600 height
}

// Display options Functions//
void showCandidate(struct candidateDetails stu[], int size)
{
	_getch();
	system("cls");
	cout << "\n\n\t Music - Candidate List";
	int y = 6;
	for (int i = 0; i < size; i++)
	{
		gotoXY(6, 4); cout << "Candidate No.\tName\t\tLast Name\tMark 1\tMark 2\tMark 3\tMark 4\tMark 5\tAverage\n";
		gotoXY(6, y); cout << right << stu[i].candidateNo;
		gotoXY(24, y); cout << right << stu[i].forename;
		gotoXY(40, y); cout << right << stu[i].surname;
		gotoXY(56, y); cout << right << stu[i].mark1;
		gotoXY(64, y); cout << right << stu[i].mark2;
		gotoXY(72, y); cout << right << stu[i].mark3;
		gotoXY(80, y); cout << right << stu[i].mark4;
		gotoXY(88, y); cout << right << stu[i].mark5;
		gotoXY(96, y); cout << right << returnAverage;
		y++;
	}
	_getch();
}
void forenameSorter(candidateDetails stu[], int size)
{
	candidateDetails duplicate[50];
	for (int i = 0; i < 50; i++)
	{
		duplicate[i] = stu[i];
	}
	sort(duplicate, duplicate + size, sortForename);
	int y = 3;
	system("cls");
	cout << "\n\  " << setw(10) << right << "Candidate No." << setw(12) << right << "Forename" << setw(15) << right << "Surname" << setw(11) << right << "Mk 1" << setw(10) << right << "Mk 2" << setw(10) << right << "Mk 3" << setw(10) << right << "Mk 4" << setw(10) << right << "Mk 5" << setw(12) << right << "Average";
	cout << "\n-----------------------------------------------------------------------------------------------------------------------";


	for (int i = 0; i < size; i++)
	{
		gotoXY(6, y); cout << duplicate[i].candidateNo;
		gotoXY(20, y); cout << duplicate[i].forename;
		gotoXY(35, y); cout << duplicate[i].surname;
		gotoXY(50, y); cout << duplicate[i].mark1;
		gotoXY(60, y); cout << duplicate[i].mark2;
		gotoXY(70, y); cout << duplicate[i].mark3;
		gotoXY(80, y); cout << duplicate[i].mark4;
		gotoXY(90, y); cout << duplicate[i].mark5;
		gotoXY(100, y); cout << duplicate[i].average;

		y++;
	}
	_getch();
	cin.ignore();
}
void surnameSorter(candidateDetails stu[], int size)
{
	candidateDetails duplicate[50];
	for (int i = 0; i < 50; i++)
	{
		duplicate[i] = stu[i];
	}
	sort(duplicate, duplicate + size, sortSurname);
	int y = 3;
	system("cls");
	cout << "\n\  " << setw(10) << right << "Candidate No." << setw(12) << right << "Forename" << setw(15) << right << "Surname" << setw(11) << right << "Mk 1" << setw(10) << right << "Mk 2" << setw(10) << right << "Mk 3" << setw(10) << right << "Mk 4" << setw(10) << right << "Mk 5" << setw(12) << right << "Average";
	cout << "\n-----------------------------------------------------------------------------------------------------------------------";


	for (int i = 0; i < size; i++)
	{
		gotoXY(6, y); cout << duplicate[i].candidateNo;
		gotoXY(20, y); cout << duplicate[i].forename;
		gotoXY(35, y); cout << duplicate[i].surname;
		gotoXY(50, y); cout << duplicate[i].mark1;
		gotoXY(60, y); cout << duplicate[i].mark2;
		gotoXY(70, y); cout << duplicate[i].mark3;
		gotoXY(80, y); cout << duplicate[i].mark4;
		gotoXY(90, y); cout << duplicate[i].mark5;
		gotoXY(100, y); cout << duplicate[i].average;

		y++;
	}
	_getch();
	cin.ignore();
}
void averageSorter(candidateDetails stu[], int size)
{
	candidateDetails duplicate[50];
	for (int i = 0; i < 50; i++)
	{
		duplicate[i] = stu[i];
	}
	sort(duplicate, duplicate + size, sortAverage);
	int y = 3;
	system("cls");
	cout << "\n\  " << setw(10) << right << "Candidate No." << setw(12) << right << "Forename" << setw(15) << right << "Surname" << setw(11) << right << "Mk 1" << setw(10) << right << "Mk 2" << setw(10) << right << "Mk 3" << setw(10) << right << "Mk 4" << setw(10) << right << "Mk 5" << setw(12) << right << "Average";
	cout << "\n-----------------------------------------------------------------------------------------------------------------------";


	for (int i = 0; i < size; i++)
	{
		gotoXY(6, y); cout << duplicate[i].candidateNo;
		gotoXY(20, y); cout << duplicate[i].forename;
		gotoXY(35, y); cout << duplicate[i].surname;
		gotoXY(50, y); cout << duplicate[i].mark1;
		gotoXY(60, y); cout << duplicate[i].mark2;
		gotoXY(70, y); cout << duplicate[i].mark3;
		gotoXY(80, y); cout << duplicate[i].mark4;
		gotoXY(90, y); cout << duplicate[i].mark5;
		gotoXY(100, y); cout << duplicate[i].average;

		y++;
	}
	_getch();
	cin.ignore();
}

// Update Menu Function//
void updateMenu(struct candidateDetails stu[], int size)
{
	int choice;
	system("cls");
	gotoXY(6, 6); cout << "Update Candidate";
	gotoXY(6, 8); cout << "Which field do you want to search by?";
	gotoXY(6, 9); cout << "By:";
	gotoXY(6, 11); cout << "1. First Name";
	gotoXY(6, 12); cout << "2. Last Name";
	gotoXY(6, 13); cout << "3. Exit";
	gotoXY(6, 15); cout << "Enter: ";
	choice = validateNum(4, 1, 12, 15);

	switch (choice)
	{
	case 1:
		system("cls");
		searchForename(stu, size);

		break;
	case 2:system("cls");
		searchByLastName(stu, size);
		break;
	case 3:

		gotoXY(6, 16); cout << "Press any key to return to the main menu: ";
		break;
	}
	_getch();
}

// Update Search Options Functions//
void searchForename(struct candidateDetails stu[], int size)
{
	system("cls");
	string firstName;
	bool found;
	char correct;
	int  y = 12;
	gotoXY(6, 6); cout << "Search By First Name: ";
	gotoXY(6, 8); cout << "Please enter the First Name of the Candidate: ";
	gotoXY(6, 9); cout << "[";
	gotoXY(25, 9); cout << "]";
	//setting cursor position
	gotoXY(7, 9);
	cin >> firstName;
	firstName[0] = toupper(firstName[0]);
	string first, last;
	int mark1, mark2, mark3, mark4, mark5;
	for (int i = 0; i < size; i++)
	{
		if (stu[i].forename == firstName)
		{
			found = true;
			while (found = true)
			{
				gotoXY(6, 11); cout << "Student Number\tName\t\tLast Name\tMark 1\tMark 2\tMark 3\tMark 4\tMark 5\tAverage";
				gotoXY(6, y); cout << stu[i].candidateNo;
				gotoXY(24, y); cout << stu[i].forename;
				gotoXY(40, y); cout << stu[i].surname;
				gotoXY(56, y); cout << stu[i].mark1;
				gotoXY(64, y); cout << stu[i].mark2;
				gotoXY(72, y); cout << stu[i].mark3;
				gotoXY(80, y); cout << stu[i].mark4;
				gotoXY(88, y); cout << stu[i].mark5;
				y++;
				gotoXY(6, 15); cout << "Correct Student?(Y/N): ";
				cin >> correct;
				if (correct == 'y' || correct == 'Y')
				{

					system("cls");
					int choice;
					for (int i = 0; i < size; i++)
					{
						gotoXY(6, 6); cout << "What would you like to update?";
						gotoXY(6, 7); cout << "1. First Name";
						gotoXY(6, 8); cout << "2. Last Name";
						gotoXY(6, 9); cout << "3. Mark 1";
						gotoXY(6, 10); cout << "4. Mark 2";
						gotoXY(6, 11); cout << "5. Mark 3";
						gotoXY(6, 12); cout << "6. Mark 4";
						gotoXY(6, 13); cout << "7. Mark 5";
						gotoXY(6, 14); cout << "8. Exit";
						gotoXY(6, 16); cout << "Enter: ";
						gotoXY(18, 16);
						choice = validateNum(8, 1, 13, 16);
						if (choice >= 1 && choice <= 7)
						{
							break;
						}
					}
					system("cls");
					switch (choice)
					{
					case 1:
						gotoXY(6, 6); cout << "Updating Forname";
						gotoXY(6, 8); cout << "Please enter the updated Forname [";
						gotoXY(54, 8); cout << "]";
						gotoXY(40, 8);
						cin >> first;
						stu[i].forename = first;
						system("cls");
						gotoXY(6, 6); cout << "Updating student number: " << stu[i].candidateNo << " to: " << stu[i].forename;
						gotoXY(6, 10); cout << "Press any key to continue: ";
						_getch();
						break;
					case 2:
						gotoXY(6, 6); cout << "Updating last name.";
						gotoXY(6, 8); cout << "Enter the new name [";
						gotoXY(40, 8); cout << "]";
						gotoXY(26, 8);
						cin >> last;
						stu[i].surname = last;
						system("cls");
						gotoXY(6, 6); cout << "Updating student number: " << stu[i].candidateNo << " to: " << stu[i].surname;
						gotoXY(6, 10); cout << "Press any key to continue: ";
						_getch();
						break;
					case 3:
						gotoXY(6, 6); cout << "Updating mark 1.";
						gotoXY(6, 8); cout << "Enter the new result [";
						gotoXY(30, 8); cout << "]";
						gotoXY(28, 8);
						cin >> mark1;
						stu[i].mark1 = mark1;
						system("cls");
						gotoXY(6, 6); cout << "You have changed mark 1 of student number: " << stu[i].candidateNo << " to: " << stu[i].mark1;
						gotoXY(6, 10); cout << "Press any key to continue: ";
						_getch();
						break;
					case 4:
						gotoXY(6, 6); cout << "Updating mark 2.";
						gotoXY(6, 8); cout << "Enter the new result [";
						gotoXY(30, 8); cout << "]";
						gotoXY(28, 8);
						cin >> mark2;
						stu[i].mark2 = mark2;
						system("cls");
						gotoXY(6, 6); cout << "You have changed mark 2 of student number: " << stu[i].candidateNo << " to: " << stu[i].mark2;
						gotoXY(6, 10); cout << "Press any key to continue: ";
						_getch();
						break;
					case 5:
						gotoXY(6, 6); cout << "Updating mark 3.";
						gotoXY(6, 8); cout << "Enter the new result [";
						gotoXY(30, 8); cout << "]";
						gotoXY(28, 8);
						cin >> mark3;
						stu[i].mark3 = mark3;
						system("cls");
						gotoXY(6, 6); cout << "You have changed mark 3 of student number: " << stu[i].candidateNo << " to: " << stu[i].mark3;
						gotoXY(6, 10); cout << "Press any key to continue: ";
						_getch();
						break;
					case 6:
						gotoXY(6, 6); cout << "Updating mark 4.";
						gotoXY(6, 8); cout << "Enter the new name [";
						gotoXY(30, 8); cout << "]";
						gotoXY(28, 8);
						cin >> mark4;
						stu[i].mark4 = mark4;
						system("cls");
						gotoXY(6, 6); cout << "You have changed mark 4 of student number: " << stu[i].candidateNo << " to: " << stu[i].mark4;
						gotoXY(6, 10); cout << "Press any key to continue: ";
						_getch();
						break;
					case 7:
						gotoXY(6, 6); cout << "Updating mark 5.";
						gotoXY(6, 8); cout << "Enter the new name [";
						gotoXY(30, 8); cout << "]";
						gotoXY(28, 8);
						cin >> mark5;
						stu[i].mark5 = mark5;
						system("cls");
						gotoXY(6, 6); cout << "You have changed mark 5 of student number:: " << stu[i].candidateNo << " to: " << stu[i].mark5;
						gotoXY(6, 10); cout << "Press any key to continue: ";
						_getch();
						break;
					case 8: break;
					default: break;
					}
					if (choice >= 1 && choice <= 8)
					{
						break;
					}
				}
				break;
			}
		}
		else if (found = false)
		{
			gotoXY(6, 10); cout << "Cannot find the first name.";
		}
	}



}
void searchByLastName(struct candidateDetails stu[], int size)
{
	system("cls");
	string lastName;
	bool found;
	char correct;
	int  y = 12;
	gotoXY(6, 6); cout << "Search By First Name: ";
	gotoXY(6, 8); cout << "Please enter the First Name of the Candidate: ";
	gotoXY(6, 9); cout << "[";
	gotoXY(25, 9); cout << "]";
	//setting cursor position
	gotoXY(7, 9);
	cin >> lastName;
	string first, last;
	int mark1, mark2, mark3, mark4, mark5;
	for (int i = 0; i < size; i++)
	{
		if (stu[i].surname == lastName)
		{
			found = true;
			while (found = true)
			{
				gotoXY(6, 11); cout << "Student Number\tName\t\tLast Name\tMark 1\tMark 2\tMark 3\tMark 4\tMark 5\tAverage";
				gotoXY(6, y); cout << stu[i].candidateNo;
				gotoXY(24, y); cout << stu[i].forename;
				gotoXY(40, y); cout << stu[i].surname;
				gotoXY(56, y); cout << stu[i].mark1;
				gotoXY(64, y); cout << stu[i].mark2;
				gotoXY(72, y); cout << stu[i].mark3;
				gotoXY(80, y); cout << stu[i].mark4;
				gotoXY(88, y); cout << stu[i].mark5;
				y++;
				gotoXY(6, 15); cout << "Correct Student?(Y/N): ";
				cin >> correct;
				if (correct == 'y' || correct == 'Y')
				{

					system("cls");
					int choice;
					for (int i = 0; i < size; i++)
					{
						gotoXY(6, 6); cout << "What would you like to update?";
						gotoXY(6, 7); cout << "1. First Name";
						gotoXY(6, 8); cout << "2. Last Name";
						gotoXY(6, 9); cout << "3. Mark 1";
						gotoXY(6, 10); cout << "4. Mark 2";
						gotoXY(6, 11); cout << "5. Mark 3";
						gotoXY(6, 12); cout << "6. Mark 4";
						gotoXY(6, 13); cout << "7. Mark 5";
						gotoXY(6, 14); cout << "8. Exit";
						gotoXY(6, 16); cout << "Enter: ";
						gotoXY(18, 16);
						choice = validateNum(8, 1, 13, 16);
						if (choice >= 1 && choice <= 7)
						{
							break;
						}
					}
					system("cls");
					switch (choice)
					{
					case 1:
						gotoXY(6, 6); cout << "You have selected first name.";
						gotoXY(6, 8); cout << "Enter the new name [";
						gotoXY(40, 8); cout << "]";
						gotoXY(26, 8);
						cin >> first;
						stu[i].forename = first;
						system("cls");
						gotoXY(6, 6); cout << "You have renamed student number: " << stu[i].candidateNo << " to: " << stu[i].forename;
						gotoXY(6, 10); cout << "Press any key to continue: ";
						_getch();
						break;
					case 2:
						gotoXY(6, 6); cout << "You have selected last name.";
						gotoXY(6, 8); cout << "Enter the new name [";
						gotoXY(40, 8); cout << "]";
						gotoXY(26, 8);
						cin >> last;
						stu[i].surname = last;
						system("cls");
						gotoXY(6, 6); cout << "You have renamed student number: " << stu[i].candidateNo << " to: " << stu[i].surname;
						gotoXY(6, 10); cout << "Press any key to continue: ";
						_getch();
						break;
					case 3:
						gotoXY(6, 6); cout << "You have chosen mark 1.";
						gotoXY(6, 8); cout << "Enter the new result [";
						gotoXY(30, 8); cout << "]";
						gotoXY(28, 8);
						cin >> mark1;
						stu[i].mark1 = mark1;
						system("cls");
						gotoXY(6, 6); cout << "You have changed mark 1 of student number: " << stu[i].candidateNo << " to: " << stu[i].mark1;
						gotoXY(6, 10); cout << "Press any key to continue: ";
						_getch();
						break;
					case 4:
						gotoXY(6, 6); cout << "You have chosen mark 2.";
						gotoXY(6, 8); cout << "Enter the new result [";
						gotoXY(30, 8); cout << "]";
						gotoXY(28, 8);
						cin >> mark2;
						stu[i].mark2 = mark2;
						system("cls");
						gotoXY(6, 6); cout << "You have changed mark 2 of student number: " << stu[i].candidateNo << " to: " << stu[i].mark2;
						gotoXY(6, 10); cout << "Press any key to continue: ";
						_getch();
						break;
					case 5:
						gotoXY(6, 6); cout << "You have chosen mark 3.";
						gotoXY(6, 8); cout << "Enter the new result [";
						gotoXY(30, 8); cout << "]";
						gotoXY(28, 8);
						cin >> mark3;
						stu[i].mark3 = mark3;
						system("cls");
						gotoXY(6, 6); cout << "You have changed mark 3 of student number: " << stu[i].candidateNo << " to: " << stu[i].mark3;
						gotoXY(6, 10); cout << "Press any key to continue: ";
						_getch();
						break;
					case 6:
						gotoXY(6, 6); cout << "You have chosen mark 4.";
						gotoXY(6, 8); cout << "Enter the new name [";
						gotoXY(30, 8); cout << "]";
						gotoXY(28, 8);
						cin >> mark4;
						stu[i].mark4 = mark4;
						system("cls");
						gotoXY(6, 6); cout << "You have changed mark 4 of student number: " << stu[i].candidateNo << " to: " << stu[i].mark4;
						gotoXY(6, 10); cout << "Press any key to continue: ";
						_getch();
						break;
					case 7:
						gotoXY(6, 6); cout << "You have chosen mark 5.";
						gotoXY(6, 8); cout << "Enter the new name [";
						gotoXY(30, 8); cout << "]";
						gotoXY(28, 8);
						cin >> mark5;
						stu[i].mark5 = mark5;
						system("cls");
						gotoXY(6, 6); cout << "You have changed mark 5 of student number:: " << stu[i].candidateNo << " to: " << stu[i].mark5;
						gotoXY(6, 10); cout << "Press any key to continue: ";
						_getch();
						break;
					case 8: break;
					default: break;
					}
					if (choice >= 1 && choice <= 8)
					{
						break;
					}
				}
				else if (correct == 'n' || correct == 'N')
				{
					break;
				}
			}

		}
		else if (found = false)
		{
			gotoXY(6, 10); cout << "Cannot find the last name.";
		}
	}
}

// Report Functions //
void reportExport(candidateDetails stu[], int size)

{
	char choice;
	system("cls");
	gotoXY(6, 6); cout << "\t Results Analysis Menu";
	gotoXY(6, 8); cout << "\n\t Which report would you like:";
	gotoXY(6, 10); cout << "\n\t 1. Report 1: Candidates: Grade - Referred";
	gotoXY(6, 11); cout << "\n\t 2. Report 2: Candidates: Grade - Pass";
	gotoXY(6, 12); cout << "\n\t 3. Report 3: Candidates: Grade - Merit";
	gotoXY(6, 13); cout << "\n\t 4. Report 4: Candidates: Grade - Distinction";
	gotoXY(6, 14); cout << "\n\t 5. Report 5: Candidates: Grades Report";
	gotoXY(6, 15); cout << "\n\t 6. Report 6: Candidates: Overall Report";
	gotoXY(6, 16); cout << "\n\t 7. Exit";
	gotoXY(6, 18); cout << "\n\t Option: ";
	choice = validateNum(7, 1, 16, 19);

	switch (choice)
	{
	case 1:
		system("cls");
		reportCandidateReferred(stu, size);
		break;

	case 2:
		system("cls");
		reportCandidatePass(stu, size);
		break;

	case 3:
		system("cls");
		reportCandidateMerit(stu, size);
		break;

	case 4:
		system("cls");
		reportCandidateDistinction(stu, size);
		break;

	case 5:
		system("cls");
		reportGradePercentage(stu, size);
		break;

	case 6:
		system("cls");
		reportOverall(stu, size);
		break;

	case 7:
		system("cls");
		gotoXY(6, 20); cout << "Press any key to return to the main menu: ";
		break;


	}
	_getch();
}
void reportCandidateReferred(struct candidateDetails stu[], int size)
{
	ofstream out;

	out.open("CandidateReferredReport.txt");
	if (out.good())
	{

		system("cls");
		out << "\n\n\  " << setw(10) << right << "Candidate No." << setw(12) << right << "Forename" << setw(15) << right << "Surname" << setw(11) << right << "Mk 1" << setw(10) << right << "Mk 2" << setw(10) << right << "Mk 3" << setw(10) << right << "Mk 4" << setw(10) << right << "Mk 5" << setw(12) << right << "Average" << setw(10) << right << "Grade";
		out << "\n-----------------------------------------------------------------------------------------------------------------------";

		for (int i = 0; i < size; i++)
		{
			if (stu[i].average <= 44)
			{
				out << "\n\n\t" << setw(14) << left << stu[i].candidateNo << setw(15) << left << stu[i].forename << setw(15) << left << stu[i].surname << setw(10) << left << stu[i].mark1 << setw(10) << left << stu[i].mark2 << setw(10) << left << stu[i].mark3 << setw(10) << left << stu[i].mark4 << setw(10) << left << stu[i].mark5 << setw(8) << left << stu[i].average << setw(6) << right << "REFERRED";
			}

		}
		out.close();
		cout << "\n\n\n\t REFERRED CANDIDATES REPORT GENERATED - PRESS ANY KEY TO RETURN TO MENU\n\n";
		_getch();
	}

}
void reportCandidatePass(struct candidateDetails stu[], int size)
{
	ofstream out;

	out.open("CandidatePassReport.txt");
	if (out.good())
	{

		system("cls");
		out << "\n\n\  " << setw(10) << right << "Candidate No." << setw(12) << right << "Forename" << setw(15) << right << "Surname" << setw(11) << right << "Mk 1" << setw(10) << right << "Mk 2" << setw(10) << right << "Mk 3" << setw(10) << right << "Mk 4" << setw(10) << right << "Mk 5" << setw(12) << right << "Average" << setw(10) << right << "Grade";
		out << "\n-----------------------------------------------------------------------------------------------------------------------";

		for (int i = 0; i < size; i++)
		{
			if (stu[i].average >= 45 && stu[i].average <= 60)
			{
				out << "\n\n\t" << setw(14) << left << stu[i].candidateNo << setw(15) << left << stu[i].forename << setw(15) << left << stu[i].surname << setw(10) << left << stu[i].mark1 << setw(10) << left << stu[i].mark2 << setw(10) << left << stu[i].mark3 << setw(10) << left << stu[i].mark4 << setw(10) << left << stu[i].mark5 << setw(8) << left << stu[i].average << setw(6) << right << "PASS";
			}
		}
	}
	out.close();
	cout << "\n\n\n\t PASS CANDIDATES REPORT GENERATED - PRESS ANY KEY TO RETURN TO MENU\n\n";
	_getch();
}
void reportCandidateMerit(struct candidateDetails stu[], int size)
{
	ofstream out;

	out.open("CandidateMeritReport.txt");
	if (out.good())
	{

		system("cls");
		out << "\n\n\  " << setw(10) << right << "Candidate No." << setw(12) << right << "Forename" << setw(15) << right << "Surname" << setw(11) << right << "Mk 1" << setw(10) << right << "Mk 2" << setw(10) << right << "Mk 3" << setw(10) << right << "Mk 4" << setw(10) << right << "Mk 5" << setw(12) << right << "Average" << setw(10) << right << "Grade";
		out << "\n-----------------------------------------------------------------------------------------------------------------------";

		for (int i = 0; i < size; i++)
		{
			if (stu[i].average >= 60 && stu[i].average <= 84)
			{
				out << "\n\n\t" << setw(14) << left << stu[i].candidateNo << setw(15) << left << stu[i].forename << setw(15) << left << stu[i].surname << setw(10) << left << stu[i].mark1 << setw(10) << left << stu[i].mark2 << setw(10) << left << stu[i].mark3 << setw(10) << left << stu[i].mark4 << setw(10) << left << stu[i].mark5 << setw(8) << left << stu[i].average << setw(6) << right << "MERIT";
			}
		}
	}
	out.close();
	cout << "\n\n\n\t MERIT CANDIDATES REPORT GENERATED - PRESS ANY KEY TO RETURN TO MENU\n\n";
	_getch();
}
void reportCandidateDistinction(struct candidateDetails stu[], int size)
{
	ofstream out;

	out.open("CandidateDistinctionReport.txt");
	if (out.good())
	{

		system("cls");
		out << "\n\n\  " << setw(10) << right << "Candidate No." << setw(12) << right << "Forename" << setw(15) << right << "Surname" << setw(11) << right << "Mk 1" << setw(10) << right << "Mk 2" << setw(10) << right << "Mk 3" << setw(10) << right << "Mk 4" << setw(10) << right << "Mk 5" << setw(12) << right << "Average" << setw(10) << right << "Grade";
		out << "\n-----------------------------------------------------------------------------------------------------------------------";

		for (int i = 0; i < size; i++)
		{
			if (stu[i].average >= 85 && stu[i].average <= 100)
			{
				out << "\n\n\t" << setw(14) << left << stu[i].candidateNo << setw(15) << left << stu[i].forename << setw(15) << left << stu[i].surname << setw(10) << left << stu[i].mark1 << setw(10) << left << stu[i].mark2 << setw(10) << left << stu[i].mark3 << setw(10) << left << stu[i].mark4 << setw(10) << left << stu[i].mark5 << setw(8) << left << stu[i].average << setw(6) << right << "DISTINCTION";
			}

		}
	}
	out.close();
	cout << "\n\n\n\t DISTINCTION CANDIDATES REPORT GENERATED - PRESS ANY KEY TO RETURN TO MENU \n\n";
	_getch();
}
void reportGradePercentage(struct candidateDetails stu[], int size)
{
	double distinction = 0, referred = 0, merit = 0, pass = 0;
	double distinctionPercentage = 0, referredPercentage = 0, meritPercentage = 0, passPercentage = 0;
	ofstream out;

	out.open("CandidateGradesReport.txt");
	out.setf(ios::fixed);
	out.setf(ios::showpoint);
	out.precision(1);

	if (out.good())
	{
		system("cls");

		for (int i = 0; i < size; i++)
		{
			if (stu[i].average < 45)
				referred++;
			else if (stu[i].average < 60)
				pass++;
			else if (stu[i].average < 85)
				merit++;
			else
				distinction++;
		}
		// CALCULATION THAT WORKS OUT THE PERCENTAGE OF CANDIDATES THAT ACHIEVED EACH GRADE
		distinctionPercentage = (distinction / size) * 100;
		referredPercentage = (referred / size) * 100;
		meritPercentage = (merit / size) * 100;
		passPercentage = (pass / size) * 100;
		// GRADE REPORT OUTPUT 

		out << "\n\tGRADES REPORT";
		out << "\n\n\t" << setw(5) << right << "Total Referred" << setw(15) << right << "Total Passes" << setw(15) << right << "Total Merits" << setw(20) << right << "Total Distinctions" << endl;
		out << "\t----------------------------------------------------------------";
		{
			out << "\n\t" << setw(5) << right << referred << setw(18) << right << pass << setw(15) << right << merit << setw(15) << right << distinction;
		}

		out << "\n\n\n\t" << setw(5) << right << "Referred %" << setw(15) << right << "Pass %" << setw(15) << right << "Merit %" << setw(20) << right << "Distinction %" << endl;
		out << "\t----------------------------------------------------------------";
		{
			out << "\n\t" << setw(5) << right << referredPercentage << setw(18) << right << passPercentage << setw(15) << right << meritPercentage << setw(16) << right << distinctionPercentage << endl;

		}


	}
	out.close();
	cout << "\n\n\n\t GRADES REPORT GENERATED - PRESS ANY KEY TO RETURN TO MENU \n\n";
	_getch();
}
void reportOverall(struct candidateDetails stu[], int size)
{
	ofstream out;

	out.open("CandidateOverallReport.txt");
	if (out.good())
	{

		system("cls");
		out << "\n\n\  " << setw(10) << right << "Candidate No." << setw(12) << right << "Forename" << setw(15) << right << "Surname" << setw(11) << right << "Mk 1" << setw(10) << right << "Mk 2" << setw(10) << right << "Mk 3" << setw(10) << right << "Mk 4" << setw(10) << right << "Mk 5" << setw(12) << right << "Average" << setw(10) << right << "Grade";
		out << "\n-----------------------------------------------------------------------------------------------------------------------";

		for (int i = 0; i < size; i++)
		{

			out << "\n\n\t" << setw(14) << left << stu[i].candidateNo << setw(15) << left << stu[i].forename << setw(15) << left << stu[i].surname << setw(10) << left << stu[i].mark1 << setw(10) << left << stu[i].mark2 << setw(10) << left << stu[i].mark3 << setw(10) << left << stu[i].mark4 << setw(10) << left << stu[i].mark5 << setw(8) << left << stu[i].average << setw(6) << right << "DISTINCTION";

		}
	}
	out.close();
	cout << "\n\n\n\t DISTINCTION CANDIDATES REPORT GENERATED - PRESS ANY KEY TO RETURN TO MENU \n\n";
	_getch();
}

// Validation Functions //

int validateNum(int max, int min, int x, int y)
{
	int num;
	bool valid = false;

	while (!valid)
	{
		gotoXY(x, y);
		cin >> num;

		if (cin.fail())
		{
			gotoXY(20, 24);
			SetConsoleTextAttribute(hConsole, 0xa);
			cout << "INVALID INPUT - PLEASE ENTER AN INTEGER ";
			setCursor(x, y);
			cin.ignore();
			cin.clear();

		}
		else if (num < min || num > max)
		{
			gotoXY(20,24);
			cout << "INVALID INPUT - PLEASE ENTER AN INTEGER BETWEEN " << min << " & " << max << endl << "\t\t\t";
			setCursor(x, y);
		}
		else
		{
			valid = true;
		}

		cin.ignore(150, '\n');
	}
	clearLine(x - 25, y + 3);
	gotoXY(x - 25, y + 3);

	cin.setf(ios::skipws);
	return num;
}
int returnAverage(struct candidateDetails stu[], int size)
{
	int average;

	for (int i = 0; i < size; i++)
	{
		average = ((stu[i].mark1 + stu[i].mark2 + stu[i].mark3 + stu[i].mark4 + stu[i].mark5) / 5);

	}
}